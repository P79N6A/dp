// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myindex.proto

#ifndef PROTOBUF_myindex_2eproto__INCLUDED
#define PROTOBUF_myindex_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace poseidon {
namespace myindex {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_myindex_2eproto();
void protobuf_AssignDesc_myindex_2eproto();
void protobuf_ShutdownFile_myindex_2eproto();

class MiRequest;
class Ad;
class MiResponse;

// ===================================================================

class MiRequest : public ::google::protobuf::Message {
 public:
  MiRequest();
  virtual ~MiRequest();

  MiRequest(const MiRequest& from);

  inline MiRequest& operator=(const MiRequest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiRequest& default_instance();

  void Swap(MiRequest* other);

  // implements Message ----------------------------------------------

  MiRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiRequest& from);
  void MergeFrom(const MiRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 targeting = 1;
  inline int targeting_size() const;
  inline void clear_targeting();
  static const int kTargetingFieldNumber = 1;
  inline ::google::protobuf::int64 targeting(int index) const;
  inline void set_targeting(int index, ::google::protobuf::int64 value);
  inline void add_targeting(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      targeting() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_targeting();

  // optional bytes sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const void* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:poseidon.myindex.MiRequest)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > targeting_;
  ::std::string* sessionid_;
  friend void  protobuf_AddDesc_myindex_2eproto();
  friend void protobuf_AssignDesc_myindex_2eproto();
  friend void protobuf_ShutdownFile_myindex_2eproto();

  void InitAsDefaultInstance();
  static MiRequest* default_instance_;
};
// -------------------------------------------------------------------

class Ad : public ::google::protobuf::Message {
 public:
  Ad();
  virtual ~Ad();

  Ad(const Ad& from);

  inline Ad& operator=(const Ad& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ad& default_instance();

  void Swap(Ad* other);

  // implements Message ----------------------------------------------

  Ad* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ad& from);
  void MergeFrom(const Ad& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:poseidon.myindex.Ad)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  friend void  protobuf_AddDesc_myindex_2eproto();
  friend void protobuf_AssignDesc_myindex_2eproto();
  friend void protobuf_ShutdownFile_myindex_2eproto();

  void InitAsDefaultInstance();
  static Ad* default_instance_;
};
// -------------------------------------------------------------------

class MiResponse : public ::google::protobuf::Message {
 public:
  MiResponse();
  virtual ~MiResponse();

  MiResponse(const MiResponse& from);

  inline MiResponse& operator=(const MiResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiResponse& default_instance();

  void Swap(MiResponse* other);

  // implements Message ----------------------------------------------

  MiResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MiResponse& from);
  void MergeFrom(const MiResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .poseidon.myindex.Ad ads = 1;
  inline int ads_size() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 1;
  inline const ::poseidon::myindex::Ad& ads(int index) const;
  inline ::poseidon::myindex::Ad* mutable_ads(int index);
  inline ::poseidon::myindex::Ad* add_ads();
  inline const ::google::protobuf::RepeatedPtrField< ::poseidon::myindex::Ad >&
      ads() const;
  inline ::google::protobuf::RepeatedPtrField< ::poseidon::myindex::Ad >*
      mutable_ads();

  // optional bytes sessionid = 2;
  inline bool has_sessionid() const;
  inline void clear_sessionid();
  static const int kSessionidFieldNumber = 2;
  inline const ::std::string& sessionid() const;
  inline void set_sessionid(const ::std::string& value);
  inline void set_sessionid(const char* value);
  inline void set_sessionid(const void* value, size_t size);
  inline ::std::string* mutable_sessionid();
  inline ::std::string* release_sessionid();
  inline void set_allocated_sessionid(::std::string* sessionid);

  // @@protoc_insertion_point(class_scope:poseidon.myindex.MiResponse)
 private:
  inline void set_has_sessionid();
  inline void clear_has_sessionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::poseidon::myindex::Ad > ads_;
  ::std::string* sessionid_;
  friend void  protobuf_AddDesc_myindex_2eproto();
  friend void protobuf_AssignDesc_myindex_2eproto();
  friend void protobuf_ShutdownFile_myindex_2eproto();

  void InitAsDefaultInstance();
  static MiResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// MiRequest

// repeated int64 targeting = 1;
inline int MiRequest::targeting_size() const {
  return targeting_.size();
}
inline void MiRequest::clear_targeting() {
  targeting_.Clear();
}
inline ::google::protobuf::int64 MiRequest::targeting(int index) const {
  // @@protoc_insertion_point(field_get:poseidon.myindex.MiRequest.targeting)
  return targeting_.Get(index);
}
inline void MiRequest::set_targeting(int index, ::google::protobuf::int64 value) {
  targeting_.Set(index, value);
  // @@protoc_insertion_point(field_set:poseidon.myindex.MiRequest.targeting)
}
inline void MiRequest::add_targeting(::google::protobuf::int64 value) {
  targeting_.Add(value);
  // @@protoc_insertion_point(field_add:poseidon.myindex.MiRequest.targeting)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MiRequest::targeting() const {
  // @@protoc_insertion_point(field_list:poseidon.myindex.MiRequest.targeting)
  return targeting_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MiRequest::mutable_targeting() {
  // @@protoc_insertion_point(field_mutable_list:poseidon.myindex.MiRequest.targeting)
  return &targeting_;
}

// optional bytes sessionid = 2;
inline bool MiRequest::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiRequest::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiRequest::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiRequest::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& MiRequest::sessionid() const {
  // @@protoc_insertion_point(field_get:poseidon.myindex.MiRequest.sessionid)
  return *sessionid_;
}
inline void MiRequest::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set:poseidon.myindex.MiRequest.sessionid)
}
inline void MiRequest::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set_char:poseidon.myindex.MiRequest.sessionid)
}
inline void MiRequest::set_sessionid(const void* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:poseidon.myindex.MiRequest.sessionid)
}
inline ::std::string* MiRequest::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:poseidon.myindex.MiRequest.sessionid)
  return sessionid_;
}
inline ::std::string* MiRequest::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MiRequest::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:poseidon.myindex.MiRequest.sessionid)
}

// -------------------------------------------------------------------

// Ad

// optional bytes name = 1;
inline bool Ad::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ad::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ad::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ad::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Ad::name() const {
  // @@protoc_insertion_point(field_get:poseidon.myindex.Ad.name)
  return *name_;
}
inline void Ad::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:poseidon.myindex.Ad.name)
}
inline void Ad::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:poseidon.myindex.Ad.name)
}
inline void Ad::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:poseidon.myindex.Ad.name)
}
inline ::std::string* Ad::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:poseidon.myindex.Ad.name)
  return name_;
}
inline ::std::string* Ad::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Ad::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:poseidon.myindex.Ad.name)
}

// -------------------------------------------------------------------

// MiResponse

// repeated .poseidon.myindex.Ad ads = 1;
inline int MiResponse::ads_size() const {
  return ads_.size();
}
inline void MiResponse::clear_ads() {
  ads_.Clear();
}
inline const ::poseidon::myindex::Ad& MiResponse::ads(int index) const {
  // @@protoc_insertion_point(field_get:poseidon.myindex.MiResponse.ads)
  return ads_.Get(index);
}
inline ::poseidon::myindex::Ad* MiResponse::mutable_ads(int index) {
  // @@protoc_insertion_point(field_mutable:poseidon.myindex.MiResponse.ads)
  return ads_.Mutable(index);
}
inline ::poseidon::myindex::Ad* MiResponse::add_ads() {
  // @@protoc_insertion_point(field_add:poseidon.myindex.MiResponse.ads)
  return ads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::poseidon::myindex::Ad >&
MiResponse::ads() const {
  // @@protoc_insertion_point(field_list:poseidon.myindex.MiResponse.ads)
  return ads_;
}
inline ::google::protobuf::RepeatedPtrField< ::poseidon::myindex::Ad >*
MiResponse::mutable_ads() {
  // @@protoc_insertion_point(field_mutable_list:poseidon.myindex.MiResponse.ads)
  return &ads_;
}

// optional bytes sessionid = 2;
inline bool MiResponse::has_sessionid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiResponse::set_has_sessionid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiResponse::clear_has_sessionid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiResponse::clear_sessionid() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_->clear();
  }
  clear_has_sessionid();
}
inline const ::std::string& MiResponse::sessionid() const {
  // @@protoc_insertion_point(field_get:poseidon.myindex.MiResponse.sessionid)
  return *sessionid_;
}
inline void MiResponse::set_sessionid(const ::std::string& value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set:poseidon.myindex.MiResponse.sessionid)
}
inline void MiResponse::set_sessionid(const char* value) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(value);
  // @@protoc_insertion_point(field_set_char:poseidon.myindex.MiResponse.sessionid)
}
inline void MiResponse::set_sessionid(const void* value, size_t size) {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  sessionid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:poseidon.myindex.MiResponse.sessionid)
}
inline ::std::string* MiResponse::mutable_sessionid() {
  set_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sessionid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:poseidon.myindex.MiResponse.sessionid)
  return sessionid_;
}
inline ::std::string* MiResponse::release_sessionid() {
  clear_has_sessionid();
  if (sessionid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sessionid_;
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MiResponse::set_allocated_sessionid(::std::string* sessionid) {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (sessionid) {
    set_has_sessionid();
    sessionid_ = sessionid;
  } else {
    clear_has_sessionid();
    sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:poseidon.myindex.MiResponse.sessionid)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace myindex
}  // namespace poseidon

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_myindex_2eproto__INCLUDED
