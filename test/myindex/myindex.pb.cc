// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: myindex.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "myindex.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace poseidon {
namespace myindex {

namespace {

const ::google::protobuf::Descriptor* MiRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ad_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ad_reflection_ = NULL;
const ::google::protobuf::Descriptor* MiResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MiResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_myindex_2eproto() {
  protobuf_AddDesc_myindex_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "myindex.proto");
  GOOGLE_CHECK(file != NULL);
  MiRequest_descriptor_ = file->message_type(0);
  static const int MiRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiRequest, targeting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiRequest, sessionid_),
  };
  MiRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiRequest_descriptor_,
      MiRequest::default_instance_,
      MiRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiRequest));
  Ad_descriptor_ = file->message_type(1);
  static const int Ad_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ad, name_),
  };
  Ad_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ad_descriptor_,
      Ad::default_instance_,
      Ad_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ad, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ad, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ad));
  MiResponse_descriptor_ = file->message_type(2);
  static const int MiResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiResponse, ads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiResponse, sessionid_),
  };
  MiResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MiResponse_descriptor_,
      MiResponse::default_instance_,
      MiResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MiResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_myindex_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiRequest_descriptor_, &MiRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ad_descriptor_, &Ad::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MiResponse_descriptor_, &MiResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_myindex_2eproto() {
  delete MiRequest::default_instance_;
  delete MiRequest_reflection_;
  delete Ad::default_instance_;
  delete Ad_reflection_;
  delete MiResponse::default_instance_;
  delete MiResponse_reflection_;
}

void protobuf_AddDesc_myindex_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmyindex.proto\022\020poseidon.myindex\"1\n\tMiR"
    "equest\022\021\n\ttargeting\030\001 \003(\003\022\021\n\tsessionid\030\002"
    " \001(\014\"\022\n\002Ad\022\014\n\004name\030\001 \001(\014\"B\n\nMiResponse\022!"
    "\n\003ads\030\001 \003(\0132\024.poseidon.myindex.Ad\022\021\n\tses"
    "sionid\030\002 \001(\014", 172);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "myindex.proto", &protobuf_RegisterTypes);
  MiRequest::default_instance_ = new MiRequest();
  Ad::default_instance_ = new Ad();
  MiResponse::default_instance_ = new MiResponse();
  MiRequest::default_instance_->InitAsDefaultInstance();
  Ad::default_instance_->InitAsDefaultInstance();
  MiResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_myindex_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_myindex_2eproto {
  StaticDescriptorInitializer_myindex_2eproto() {
    protobuf_AddDesc_myindex_2eproto();
  }
} static_descriptor_initializer_myindex_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MiRequest::kTargetingFieldNumber;
const int MiRequest::kSessionidFieldNumber;
#endif  // !_MSC_VER

MiRequest::MiRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poseidon.myindex.MiRequest)
}

void MiRequest::InitAsDefaultInstance() {
}

MiRequest::MiRequest(const MiRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:poseidon.myindex.MiRequest)
}

void MiRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiRequest::~MiRequest() {
  // @@protoc_insertion_point(destructor:poseidon.myindex.MiRequest)
  SharedDtor();
}

void MiRequest::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void MiRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiRequest_descriptor_;
}

const MiRequest& MiRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myindex_2eproto();
  return *default_instance_;
}

MiRequest* MiRequest::default_instance_ = NULL;

MiRequest* MiRequest::New() const {
  return new MiRequest;
}

void MiRequest::Clear() {
  if (has_sessionid()) {
    if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sessionid_->clear();
    }
  }
  targeting_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poseidon.myindex.MiRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 targeting = 1;
      case 1: {
        if (tag == 8) {
         parse_targeting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_targeting())));
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targeting())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_targeting;
        if (input->ExpectTag(18)) goto parse_sessionid;
        break;
      }

      // optional bytes sessionid = 2;
      case 2: {
        if (tag == 18) {
         parse_sessionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poseidon.myindex.MiRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poseidon.myindex.MiRequest)
  return false;
#undef DO_
}

void MiRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poseidon.myindex.MiRequest)
  // repeated int64 targeting = 1;
  for (int i = 0; i < this->targeting_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->targeting(i), output);
  }

  // optional bytes sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:poseidon.myindex.MiRequest)
}

::google::protobuf::uint8* MiRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:poseidon.myindex.MiRequest)
  // repeated int64 targeting = 1;
  for (int i = 0; i < this->targeting_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->targeting(i), target);
  }

  // optional bytes sessionid = 2;
  if (has_sessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poseidon.myindex.MiRequest)
  return target;
}

int MiRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionid());
    }

  }
  // repeated int64 targeting = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->targeting_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targeting(i));
    }
    total_size += 1 * this->targeting_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiRequest::MergeFrom(const MiRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  targeting_.MergeFrom(from.targeting_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiRequest::CopyFrom(const MiRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiRequest::IsInitialized() const {

  return true;
}

void MiRequest::Swap(MiRequest* other) {
  if (other != this) {
    targeting_.Swap(&other->targeting_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiRequest_descriptor_;
  metadata.reflection = MiRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ad::kNameFieldNumber;
#endif  // !_MSC_VER

Ad::Ad()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poseidon.myindex.Ad)
}

void Ad::InitAsDefaultInstance() {
}

Ad::Ad(const Ad& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:poseidon.myindex.Ad)
}

void Ad::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ad::~Ad() {
  // @@protoc_insertion_point(destructor:poseidon.myindex.Ad)
  SharedDtor();
}

void Ad::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Ad::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ad::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ad_descriptor_;
}

const Ad& Ad::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myindex_2eproto();
  return *default_instance_;
}

Ad* Ad::default_instance_ = NULL;

Ad* Ad::New() const {
  return new Ad;
}

void Ad::Clear() {
  if (has_name()) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      name_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ad::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poseidon.myindex.Ad)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poseidon.myindex.Ad)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poseidon.myindex.Ad)
  return false;
#undef DO_
}

void Ad::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poseidon.myindex.Ad)
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:poseidon.myindex.Ad)
}

::google::protobuf::uint8* Ad::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:poseidon.myindex.Ad)
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poseidon.myindex.Ad)
  return target;
}

int Ad::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ad::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ad* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ad*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ad::MergeFrom(const Ad& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ad::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ad::CopyFrom(const Ad& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ad::IsInitialized() const {

  return true;
}

void Ad::Swap(Ad* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ad::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ad_descriptor_;
  metadata.reflection = Ad_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MiResponse::kAdsFieldNumber;
const int MiResponse::kSessionidFieldNumber;
#endif  // !_MSC_VER

MiResponse::MiResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:poseidon.myindex.MiResponse)
}

void MiResponse::InitAsDefaultInstance() {
}

MiResponse::MiResponse(const MiResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:poseidon.myindex.MiResponse)
}

void MiResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sessionid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MiResponse::~MiResponse() {
  // @@protoc_insertion_point(destructor:poseidon.myindex.MiResponse)
  SharedDtor();
}

void MiResponse::SharedDtor() {
  if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sessionid_;
  }
  if (this != default_instance_) {
  }
}

void MiResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MiResponse_descriptor_;
}

const MiResponse& MiResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_myindex_2eproto();
  return *default_instance_;
}

MiResponse* MiResponse::default_instance_ = NULL;

MiResponse* MiResponse::New() const {
  return new MiResponse;
}

void MiResponse::Clear() {
  if (has_sessionid()) {
    if (sessionid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      sessionid_->clear();
    }
  }
  ads_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MiResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:poseidon.myindex.MiResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .poseidon.myindex.Ad ads = 1;
      case 1: {
        if (tag == 10) {
         parse_ads:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ads;
        if (input->ExpectTag(18)) goto parse_sessionid;
        break;
      }

      // optional bytes sessionid = 2;
      case 2: {
        if (tag == 18) {
         parse_sessionid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sessionid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:poseidon.myindex.MiResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:poseidon.myindex.MiResponse)
  return false;
#undef DO_
}

void MiResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:poseidon.myindex.MiResponse)
  // repeated .poseidon.myindex.Ad ads = 1;
  for (int i = 0; i < this->ads_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ads(i), output);
  }

  // optional bytes sessionid = 2;
  if (has_sessionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sessionid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:poseidon.myindex.MiResponse)
}

::google::protobuf::uint8* MiResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:poseidon.myindex.MiResponse)
  // repeated .poseidon.myindex.Ad ads = 1;
  for (int i = 0; i < this->ads_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ads(i), target);
  }

  // optional bytes sessionid = 2;
  if (has_sessionid()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sessionid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:poseidon.myindex.MiResponse)
  return target;
}

int MiResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bytes sessionid = 2;
    if (has_sessionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sessionid());
    }

  }
  // repeated .poseidon.myindex.Ad ads = 1;
  total_size += 1 * this->ads_size();
  for (int i = 0; i < this->ads_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ads(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MiResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MiResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MiResponse::MergeFrom(const MiResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  ads_.MergeFrom(from.ads_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sessionid()) {
      set_sessionid(from.sessionid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MiResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiResponse::CopyFrom(const MiResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiResponse::IsInitialized() const {

  return true;
}

void MiResponse::Swap(MiResponse* other) {
  if (other != this) {
    ads_.Swap(&other->ads_);
    std::swap(sessionid_, other->sessionid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MiResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MiResponse_descriptor_;
  metadata.reflection = MiResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace myindex
}  // namespace poseidon

// @@protoc_insertion_point(global_scope)
